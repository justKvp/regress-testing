pipeline {

    agent any

    parameters {
        string(name: 'config', defaultValue: 'default', description: 'YAML config for run')
        string(name: 'tags', defaultValue: 'run', description: 'List of tags for running')
    }

    stages {
        stage('Run Tests') {

            steps('run docker image') {
                // This step should not normally be used in your script. Consult the inline help for details.
                //withDockerContainer(image: 'qvipka/playwright-1.45.0:latest') {
                //    sh './mvnw -Dconfig=$config -Dgroups=tags clean test'
                //}

                sh './mvnw -Dconfig=$config -Dgroups=$tags clean test'
            }

        }
    }

    post {
        always {
            script {

                /** Сначала в любом случае генерим аллюр-отчет **/
                allure([
                   includeProperties: false,
                   jdk: '',
                   properties: [],
                   reportBuildPolicy: 'ALWAYS',
                   results: [[path: 'target/allure-results']]
                ])

                /** Затягиваем данные из результатов **/
                junit 'target/surefire-reports/*.xml'

                /** Генерим отчет для allure-notifications **/
                //sh 'allure generate target/allure-results -o target/allure-report'

                echo 'JOB_NAME: $JOB_NAME'
                echo 'JOB_BASE_NAME: $JOB_BASE_NAME'
                echo 'BUILD_URL: $BUILD_URL'

                /** Отправляем отчет на почту **/
                callAllureNotification();
              }
        }
    }
}

def callAllureNotification() {
    createConfig()
    sh 'java "-DconfigFile=notifications/config.json" -jar notifications/allure-notifications-4.7.0.jar'
    deleteConfig()
}

def createConfig() {
    String body = '{\n' +
            '  "base": {\n' +
            '    "logo": "logo.png",\n' +
            '    "project": $JOB_NAME,\n' +
            '    "environment": "some env",\n' +
            '    "comment": "some comment",\n' +
            '    "reportLink": $BUILD_URL,\n' +
            '    "language": "ru",\n' +
            '    "allureFolder": "allure-report",\n' +
            '    "enableChart": true,\n' +
            '    "enableSuitesPublishing": true\n' +
            '  },\n' +
            '  "mail": {\n' +
            '    "host": "smtp.gmail.com",\n' +
            '    "port": "465",\n' +
            '    "username": "qvipka",\n' +
            '    "password": "hxjg ntot nfnh cqss",\n' +
            '    "securityProtocol": "SSL",\n' +
            '    "from": "qvipka@gmail.com",\n' +
            '    "recipient": "va_90@mail.ru",\n' +
            '    "templatePath": "/templates/html.ftl"\n' +
            '  }\n' +
            '}';

    writeFile file: 'notifications/config.json', text: body
}

def deleteConfig() {
    sh 'rm notifications/config.json'
}